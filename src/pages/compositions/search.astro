---
import Layout from "../../layouts/Layout.astro";
import SearchForm from "../../components/SearchForm.astro";
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';
import sectionPicture from '../../images/section-picture.jpg';
import { getCollection } from "astro:content";

// const searchQuery: string | null = Astro.url.searchParams.get('search_query');

const description = 'Compositions';
---

<Layout title ="Search Results", description={description} current="compositions">
    <div class="container max-w-[1120px] flex flex-col mx-auto p-4">
        <Image src={sectionPicture} alt="Section Picture" />

        <h1 class="text-5xl font-bold mt-10 mb-6">Compositions</h1>
        
        <SearchForm />

        <section aria-label="Search Results">

            <h2 id="search-readout" class="text-2xl font-bold mt-8 mb-6">Search Results</h2>
    
            <div id="search-results" class="flex flex-col space-y-4">
    
            </div>
        </section>
    </div>


</Layout>

<script>
    //https://www.fusejs.io/ - for search
    import Fuse from 'fuse.js';

    let SEARCH_DATA: any;
    let FUSE_INSTANCE: any;
    const FUSE_OPTIONS = {
        includeScore: true,
        useExtendedSearch: true,
        keys: [
            {
            name: 'title',
            weight: 0.5
            },
            {
            name: 'subtitle',
            weight: 1.0
            }
        ]
    }

    // selectors
    const searchReadout = document.querySelector("#search-readout");
	const resultsList = document.querySelector("#search-results");

    const urlSearchParams = new URLSearchParams(window.location.search);
    const params = Object.fromEntries(urlSearchParams.entries());
    // console.log('params', params);

    const search = document.querySelector("#compositions-search") as HTMLInputElement;

    // functions
    function updateSearchReadout(search: string) {
		searchReadout!.textContent = search ? `Search Results for "${search}"` : "";
	}

    function generateSearchList(results: any) {
        return results.map((result: any) => {
            const { title, subtitle, year, slug } = result.item;
            return `
            <div class="font-serif">
                <a href=/compositions/${slug} class="text-xl font-semibold mb-2 flex items-center space-x-2 hover:underline underline-offset-8">
                    <span>${title} (${year})</span>
                    <Icon name="ph:arrow-right" widths="20" x-height="20" />
                </a>
                <span class="italic text-lg">${subtitle}</span>
            </div>`;
        }).join("");
    }
    
    async function fetchSearchResults(search: string) {
        if (search.length === 0) return;
        if (!SEARCH_DATA) {
            try {
            const res = await fetch("./search.json");
            if (!res.ok) {
                throw new Error("Something went wrong, please try again.");
            }
            const data = await res.json();
            // console.log(data);
            SEARCH_DATA = data;
            } catch(e) {
                console.log(e);
            }
        }
        if (SEARCH_DATA && !FUSE_INSTANCE) {
            FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
        }
        if (!FUSE_INSTANCE) return;

        // see https://www.fusejs.io/examples.html#extended-search
        const extendedSearchString = search.replace(/[^a-zA-Z ]/g, "").split(" ").map((item) => {
            return "'" + item;
        }).join("|");
        // console.log(extendedSearchString);
        const searchResult = FUSE_INSTANCE.search(extendedSearchString);
        // console.log(searchResult);
        resultsList!.innerHTML = searchResult.length > 0 ? generateSearchList(searchResult) : "No results found...";
    }

    // event listeners
    window.addEventListener("DOMContentLoaded", () => {
        fetchSearchResults(params['search_query']);
        updateSearchReadout(params['search_query']);
        search.value = params['search_query'];
    });

</script>