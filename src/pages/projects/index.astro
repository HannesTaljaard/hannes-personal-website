---
import { NAME } from "../../constants";
import Layout from "../../layouts/Layout.astro";
import { Image } from 'astro:assets';
import ribbonProjects from '../../images/Ribbon-4-Projects.webp';
// Icons managed with astro-icon + icon package (@iconify-json/ph)
import { Icon } from 'astro-icon/components';
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { formatDateNoDay } from "../../utils";
import Contact from "../contact.astro";

// All project with boolean 'isLongTerm' set to true
const longTermProjects: CollectionEntry<'projects'>[] = (await getCollection('projects', ({data}) => {
    return data.isLongTerm === true;
}));

// All project with boolean 'isLongTerm' set to false
let shortTermProjects: CollectionEntry<'projects'>[] = (await getCollection('projects', ({data}) => {
    return data.isLongTerm === false;
}));

// Sorted by Date descending
shortTermProjects = shortTermProjects
    .sort((a:CollectionEntry<'projects'>, b:CollectionEntry<'projects'>) => {
        if(a.data.endDate !== null && b.data.endDate !== null) {
            return a.data.endDate < b.data.endDate ? 1 : -1;
        } else {
            return a.data.endDate !== null ? 1 : -1;
        }
});

const projectsPerYear = new Map<string, CollectionEntry<'projects'>[]>();

shortTermProjects.map(project => {
    if (project.data.endDate === null && projectsPerYear.has('current')) {
        let projectsPerOneYear: CollectionEntry<'projects'>[] = projectsPerYear.get('current')!;
        projectsPerOneYear.push(project);
        projectsPerYear.set('current', projectsPerOneYear);
        return;
    } else if (project.data.endDate !== null && projectsPerYear.has(project.data.endDate.getFullYear())) {
        let projectsPerOneYear: CollectionEntry<'projects'>[] = projectsPerYear.get(project.data.endDate.getFullYear())!;
        projectsPerOneYear.push(project);
        projectsPerYear.set(project.data.endDate.getFullYear(), projectsPerOneYear);
        return;
    }
    project.data.endDate === null ? projectsPerYear.set('current', [project]) : projectsPerYear.set(project.data.endDate.getFullYear(), [project])
});

// An array of available years i.e. years in which at least one project *ended*
const years = Array.from(projectsPerYear.keys());
// console.log(years);

const title = 'Projects - ' + NAME;
const description = "Projects"; // TODO
---

<Layout title={title}, description={description} current="projects">
    <div class="container max-w-[1120px] flex flex-col mx-auto p-4">
        <Image src={ribbonProjects} alt="Ribbon Projects" />

        <h1 class="text-3xl lg:text-5xl font-bold mt-10 mb-8">Projects</h1>

        <ul class="flex flex-row flex-nowrap overflow-x-auto space-x-4 mb-8">
            <!-- Seperate Long-Term handling -->
            <a href={'#long-term'}>
                <li class="flex flex-row flex-nowrap items-center space-x-1 text-gray-400 hover:text-black">
                    <span class="uppercase text-nowrap">Long-Term</span>
                    <Icon name="prime--arrow-down" />
                </li>
            </a>
            {years.map(year => (
                <a href={'#year-' + year}>
                    <li class="flex flex-row flex-nowrap items-center space-x-1 text-gray-400 hover:text-black">
                        <span class="uppercase text-nowrap">{year}</span>
                        <Icon name="prime--arrow-down" />
                    </li>
                </a>
            ))}
        </ul>

        <!-- Seperate Long-Term handling -->
        <h2 id={'long-term'} class="text-2xl font-bold mb-6 capitalize">Long-Term</h2>
        <div class="flex flex-col divide-y mb-20">
            {longTermProjects.map(async (project) => {
            const {Content} = await project.render()
            return (
                <div class="flex flex-col space-y-6 py-6 first:pt-0 last:pb-0 lg:flex-row lg:space-x-6 lg:space-y-0">
                    <img src={project.data.imgURL} alt="pic" class="lg:max-w-md">
                    <div class="font-serif">
                        <div class="text-xl font-medium mb-2">{project.data.title}</div>
                        <div class="[&_a]:text-blue-800 [&_a]:underline [&_a]:underline-offset-8 hover:[&_a]:no-underline">
                            <Content />
                        </div>
                        <div class="mt-6 text-blue-800">
                            <a href="/">Read More TODO</a>
                        </div>
                    </div>
                </div>
            )
            })}
        </div>

        {years.map(year => (
            <h2 id={'year-' + year} class="text-2xl font-bold mb-6 capitalize">{year}</h2>
            <div class="flex flex-col divide-y mb-20">
                {projectsPerYear.get(year)!.map(async (project) => {
                const {Content} = await project.render()
                return (
                    <div class="flex flex-col space-y-6 py-6 first:pt-0 last:pb-0 lg:flex-row lg:space-x-6 lg:space-y-0">
                        <img src={project.data.imgURL} alt="pic" class="lg:max-w-md">
                        <div class="font-serif">
                            <div class="text-xl font-medium mb-2">{project.data.title}</div>
                            <div class="text-gray-500 mb-4">
                                <div class="text-sm"><span>{formatDateNoDay(project.data.startDate)}</span> - <span>{project.data.endDate ? formatDateNoDay(project.data.endDate) : 'Ongoing'}</div>
                                {project.data.performance ? <div class="text-sm mt-1">{'Performance: ' + project.data.performance}</div> : null}
                            </div>
                            <div class="[&_a]:text-blue-800 [&_a]:underline [&_a]:underline-offset-8 hover:[&_a]:no-underline">
                                <Content />
                            </div>
                        </div>
                    </div> 
                )
                })}
            </div>
        ))}

    </div>
</Layout>